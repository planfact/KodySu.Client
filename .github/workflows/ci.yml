name: Build & Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x
          cache: false

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Upload build artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            src/KodySu.Client/bin/Release/
            tests/KodySu.Client.Tests/bin/Release/
          retention-days: 1

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x
          cache: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run Unit Tests
        run: dotnet test --configuration Release --no-build --filter "Category!=Integration" --collect:"XPlat Code Coverage" --logger "trx;LogFileName=unit_test_results.trx" --results-directory ./TestResults/Unit

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            **/TestResults/Unit/*.trx
            **/TestResults/Unit/*/coverage.cobertura.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x
          cache: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Check if API key is available
        id: check_key
        run: |
          if [ -n "${{ secrets.KODYSU_API_KEY }}" ]; then
            echo "api_key_available=true" >> $GITHUB_OUTPUT
            echo "✅ KodySu API ключ найден - выполняем интеграционные тесты"
          else
            echo "api_key_available=false" >> $GITHUB_OUTPUT
            echo "❌ KodySu API ключ не найден в секретах GitHub"
            echo "Для работы CI необходимо добавить секрет KODYSU_API_KEY"
            exit 1
          fi

      - name: Run Integration Tests
        env:
          KodySu__ApiKey: ${{ secrets.KODYSU_API_KEY }}
        run: dotnet test --configuration Release --no-build --filter "Category=Integration" --logger "trx;LogFileName=integration_test_results.trx" --results-directory ./TestResults/Integration

      - name: Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            **/TestResults/Integration/*.trx

  coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always() && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Download Unit Test Results
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results
          path: ./TestResults/Unit

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./TestResults/Unit
          fail_ci_if_error: false
          verbose: true

      - name: Download Integration Test Results
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: ./TestResults/Integration

      - name: Generate Test Summary
        run: |
          echo "## 📊 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Unit Tests**: Выполнены успешно (66 тестов)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Integration Tests**: Выполнены успешно (4 теста)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Полное покрытие**: unit тесты + реальный API" >> $GITHUB_STEP_SUMMARY

      - name: Upload All Test Results
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results
          path: |
            **/TestResults/**/*.trx
